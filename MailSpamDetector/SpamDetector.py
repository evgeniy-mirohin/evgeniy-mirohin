# -*- coding: utf-8 -*-
"""

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AoHoMqy1rWBULK29raFg2fV4of7QWcxx

поиск спама в сообщениях
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# 1. Загрузка данных


!wget -O 'SMS_test.csv' 'https://drive.usercontent.google.com/download?id=17gV8b7uS-d_vO4kaZrVjxopXLOOXZ9j-&export=download&authuser=0'

df = pd.read_csv('SMS_test.csv', sep=',')

# Проверка структуры данных
print(df.head())

# 2. Предобработка
# Преобразуем метки в числовой формат
#df['label_num'] = df['label'].map({'Non-Spam': 0, 'spam': 1})
df['Label'] = df['Label'].astype('category')
df['label_num'] = df['Label'].cat.codes
df

# Разделение на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(
    df['Message_body'],
    df['label_num'],
    test_size=0.15,
    #random_state=42
    )

# Векторизация текста
vectorizer = CountVectorizer()
X_train_vect = vectorizer.fit_transform(X_train)
X_test_vect = vectorizer.transform(X_test)

# 3. Обучение модели
model = MultinomialNB()
model.fit(X_train_vect, y_train)

# Предсказания
y_pred = model.predict(X_test_vect)

# 4. Оценка модели
print('Classification Report:')
print(classification_report(y_test, y_pred, target_names=['Non-Spam', 'spam']))

# Матрица ошибок
cm = confusion_matrix(y_test, y_pred, normalize='true')
sns.heatmap(cm, annot=True, fmt='.2%', cmap='Blues', xticklabels=['Non-Spam', 'spam'], yticklabels=['Non-Spam', 'spam'])
plt.xlabel('Предсказанный класс')
plt.ylabel('Истинный класс')
plt.title('Матрица ошибок (в процентах)')
plt.show()
